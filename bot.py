import os
from localization import gb_localization, ua_localization
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

load_dotenv("token.env")
TOKEN = os.getenv("BOT_TOKEN")

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏
language_menu = ReplyKeyboardMarkup(
    keyboard=[
        ["üá¨üáß English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [lang["Donate"], lang["Portfolio"], lang["Option"]]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ü—ñ–¥–º–µ–Ω—é
def get_sub_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [lang["BackToMenu"]],
            [lang["Info"], lang["Help"]]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ú–µ–Ω—é –æ–ø—Ü—ñ–π
def get_options_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[
            [lang["Reset"]],
            [lang["BackToMenu"]]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data.clear()
        await update.message.reply_text(
            "Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
            reply_markup=language_menu
        )

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def clear_previous_bot_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    msg_id = context.user_data.get("last_bot_message_id")

    if msg_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"Failed to delete message: {e}")
        context.user_data["last_bot_message_id"] = None

# –ó–º—ñ–Ω–∞ –º–æ–≤–∏ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    await update.message.reply_text(
        lang["ResetingMes"],
        reply_markup=language_menu
    )
    if update.message:
        context.user_data.clear()

# –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    text = "Choose one option:" if lang == gb_localization else "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:"
    await update.message.reply_text(text, reply_markup=get_main_menu(lang))

# –ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–ø—Ü—ñ–π
async def show_options_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    await update.message.reply_text(lang["OptionMes"], reply_markup=get_options_menu(lang))

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text

    # –í–∏–±—ñ—Ä –º–æ–≤–∏
    if msg == "üá¨üáß English":
        context.user_data["lang"] = gb_localization
        await update.message.reply_text(gb_localization["LocalMes"])
        await show_main_menu(update, context)
        return
    elif msg == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        context.user_data["lang"] = ua_localization
        await update.message.reply_text(ua_localization["LocalMes"])
        await show_main_menu(update, context)
        return

    lang = context.user_data.get("lang")
    if not lang:
        await update.message.reply_text("Please select a language first / –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:")
        return

    chat_id = update.message.chat_id

    if msg in ["üí≥ Donate", "üí≥ –î–æ–Ω–∞—Ç"]:
        sent_msg = await update.message.reply_text(lang["DonateMes"], parse_mode="Markdown", reply_markup=get_sub_menu(lang))
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["üìÅ Portfolio", "üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"]:
        sent_msg = await update.message.reply_text(lang["PortfolioMes"], parse_mode="Markdown", reply_markup=get_sub_menu(lang))
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["‚öôÔ∏è Options", "‚öôÔ∏è –û–ø—Ü—ñ—ó"]:
        await show_options_menu(update, context)

    elif msg in ["üîÑ Change Language", "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"]:
        await restart(update, context)

    elif msg in ["üîô Back to main menu", "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]:
        await clear_previous_bot_message(update, context)
        await show_main_menu(update, context)

    elif msg in ["‚ÑπÔ∏è Info", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ"]:
        sent_msg = await update.message.reply_text(lang["InfoMes"])
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["‚ùì Help", "‚ùì –î–æ–ø–æ–º–æ–≥–∞"]:
        sent_msg = await update.message.reply_text(lang["HelpMes"])
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    else:
        await update.message.reply_text(lang["Error"])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("restart", restart))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling()
