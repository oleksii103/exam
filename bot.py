import os
import random
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from localization import gb_localization, ua_localization

PHOTO_FOLDER = "photos" #üëà —Ç—É—Ç–∞ —Ñ–æ—Ç–æ—á–∫–∏

load_dotenv("token.env")
TOKEN = os.getenv("BOT_TOKEN")

user_ids = set()  #üëà —Ç—É—Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ chat_id –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏

language_menu = ReplyKeyboardMarkup(
    keyboard=[["üá¨üáß English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

def get_main_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[lang["Donate"], lang["Portfolio"], lang["Option"]]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_sub_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[lang["BackToMenu"]], [lang["Info"], lang["Help"]]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_options_menu(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[lang["Reset"]], [lang["BackToMenu"]]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data.clear()
        user_ids.add(update.effective_chat.id)  # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        await update.message.reply_text(
            "Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
            reply_markup=language_menu
        )

async def clear_previous_bot_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    msg_id = context.user_data.get("last_bot_message_id")
    if msg_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"Failed to delete message: {e}")
        context.user_data["last_bot_message_id"] = None

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    await update.message.reply_text(
        lang["ResetingMes"],
        reply_markup=language_menu
    )
    if update.message:
        context.user_data.clear()

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    text = "Choose one option:" if lang == gb_localization else "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:"
    await update.message.reply_text(text, reply_markup=get_main_menu(lang))

async def show_options_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", gb_localization)
    await update.message.reply_text(lang["OptionMes"], reply_markup=get_options_menu(lang))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    chat_id = update.message.chat_id
    user_ids.add(chat_id)  # —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ —Å—é–¥–∏, —è–∫—â–æ —â–µ –Ω–µ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π

    if msg == "üá¨üáß English":
        context.user_data["lang"] = gb_localization
        await update.message.reply_text(gb_localization["LocalMes"])
        await show_main_menu(update, context)
        return
    elif msg == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        context.user_data["lang"] = ua_localization
        await update.message.reply_text(ua_localization["LocalMes"])
        await show_main_menu(update, context)
        return

    lang = context.user_data.get("lang")
    if not lang:
        await update.message.reply_text("Please select a language first / –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:")
        return

    if msg in ["üí≥ Donate", "üí≥ –î–æ–Ω–∞—Ç"]:
        sent_msg = await update.message.reply_text(lang["DonateMes"], parse_mode="Markdown", reply_markup=get_sub_menu(lang))
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["üìÅ Portfolio", "üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ"]:
        sent_msg = await update.message.reply_text(lang["PortfolioMes"], parse_mode="Markdown", reply_markup=get_sub_menu(lang))
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["‚öôÔ∏è Options", "‚öôÔ∏è –û–ø—Ü—ñ—ó"]:
        await show_options_menu(update, context)

    elif msg in ["üîÑ Change Language", "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"]:
        await restart(update, context)

    elif msg in ["üîô Back to main menu", "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]:
        await clear_previous_bot_message(update, context)
        await show_main_menu(update, context)

    elif msg in ["‚ÑπÔ∏è Info", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ"]:
        sent_msg = await update.message.reply_text(lang["InfoMes"])
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    elif msg in ["‚ùì Help", "‚ùì –î–æ–ø–æ–º–æ–≥–∞"]:
        sent_msg = await update.message.reply_text(lang["HelpMes"])
        context.user_data["last_bot_message_id"] = sent_msg.message_id

    else:
        await update.message.reply_text(lang["Error"])

#  –æ—Ç—É—Ç —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—èü•≥
async def broadcast_message(application):
    while True:
        for chat_id in user_ids:
            try:
                # —Ç—É—Ç –º–∏ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏, –º–∞—î–º–æ –Ω–∞–≤—ñ—Ç—å –Ω–∞ —ñ–Ω–≥–ª—ñ—à—ñüò±
                message = "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∫–æ–∂–Ω—ñ 90 —Ö–≤–∏–ª–∏–Ω!\n‚è∞ Reminder: every 90 minutes!" #üëà —Ç—É—Ç –º–æ–∂–µ—à —Ç–µ–∫—Å—Ç –ø–æ–º—ñ–Ω—è—Ç–∏ 
                await application.bot.send_message(chat_id=chat_id, text=message)

                # —Ç—É—Ç –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ—á–∫–∏ –∑ —Ç–µ–∫–∏üì∑
                photos = [file for file in os.listdir(PHOTO_FOLDER) if file.lower().endswith(('.png', '.jpg', '.jpeg'))]
                if photos:
                    random_photo = random.choice(photos)
                    photo_path = os.path.join(PHOTO_FOLDER, random_photo)

                    # –∞ —Ç—É—Ç –ë–æ–≥–∏ —Ä–∞–Ω–¥–æ–º–∞ –≤–∏–±–∏—Ä–∞—é—Ç—å –æ–¥–Ω—Éüòá
                    with open(photo_path, 'rb') as photo_file:
                        await application.bot.send_photo(chat_id=chat_id, photo=photo_file)

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {chat_id}: {e}")

        await asyncio.sleep(1 * 60)  #üëà –∞ —Ç—É—Ç —á–∞—Å –∞–ª–µ –º—ñ–Ω—è–π —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—É —Ü–∏—Ñ–µ—Ä–∫—É 

 
# –∞ –æ—Ç—É—Ç —Ä–æ–∑—Å–∏–ª–∫–∞ –æ–∂–∏–≤–∞—îüòé
async def on_startup(application):
    asyncio.create_task(broadcast_message(application))

app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("restart", restart))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling()
